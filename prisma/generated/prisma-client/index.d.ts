// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  question: (where?: QuestionWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  question: (where: QuestionWhereUniqueInput) => QuestionNullablePromise;
  questions: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Question>;
  questionsConnection: (args?: {
    where?: QuestionWhereInput;
    orderBy?: QuestionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuestionConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createQuestion: (data: QuestionCreateInput) => QuestionPromise;
  updateQuestion: (args: {
    data: QuestionUpdateInput;
    where: QuestionWhereUniqueInput;
  }) => QuestionPromise;
  updateManyQuestions: (args: {
    data: QuestionUpdateManyMutationInput;
    where?: QuestionWhereInput;
  }) => BatchPayloadPromise;
  upsertQuestion: (args: {
    where: QuestionWhereUniqueInput;
    create: QuestionCreateInput;
    update: QuestionUpdateInput;
  }) => QuestionPromise;
  deleteQuestion: (where: QuestionWhereUniqueInput) => QuestionPromise;
  deleteManyQuestions: (where?: QuestionWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  question: (
    where?: QuestionSubscriptionWhereInput
  ) => QuestionSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type QuestionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "questionTitle_ASC"
  | "questionTitle_DESC"
  | "questionBody_ASC"
  | "questionBody_DESC"
  | "votes_ASC"
  | "votes_DESC"
  | "createdBy_ASC"
  | "createdBy_DESC"
  | "answer_ASC"
  | "answer_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface QuestionCreateInput {
  id?: Maybe<ID_Input>;
  questionTitle: String;
  questionBody: String;
  votes: Int;
  createdBy?: Maybe<String>;
  answer?: Maybe<String>;
}

export interface QuestionUpdateInput {
  questionTitle?: Maybe<String>;
  questionBody?: Maybe<String>;
  votes?: Maybe<Int>;
  createdBy?: Maybe<String>;
  answer?: Maybe<String>;
}

export interface QuestionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  questionTitle?: Maybe<String>;
  questionTitle_not?: Maybe<String>;
  questionTitle_in?: Maybe<String[] | String>;
  questionTitle_not_in?: Maybe<String[] | String>;
  questionTitle_lt?: Maybe<String>;
  questionTitle_lte?: Maybe<String>;
  questionTitle_gt?: Maybe<String>;
  questionTitle_gte?: Maybe<String>;
  questionTitle_contains?: Maybe<String>;
  questionTitle_not_contains?: Maybe<String>;
  questionTitle_starts_with?: Maybe<String>;
  questionTitle_not_starts_with?: Maybe<String>;
  questionTitle_ends_with?: Maybe<String>;
  questionTitle_not_ends_with?: Maybe<String>;
  questionBody?: Maybe<String>;
  questionBody_not?: Maybe<String>;
  questionBody_in?: Maybe<String[] | String>;
  questionBody_not_in?: Maybe<String[] | String>;
  questionBody_lt?: Maybe<String>;
  questionBody_lte?: Maybe<String>;
  questionBody_gt?: Maybe<String>;
  questionBody_gte?: Maybe<String>;
  questionBody_contains?: Maybe<String>;
  questionBody_not_contains?: Maybe<String>;
  questionBody_starts_with?: Maybe<String>;
  questionBody_not_starts_with?: Maybe<String>;
  questionBody_ends_with?: Maybe<String>;
  questionBody_not_ends_with?: Maybe<String>;
  votes?: Maybe<Int>;
  votes_not?: Maybe<Int>;
  votes_in?: Maybe<Int[] | Int>;
  votes_not_in?: Maybe<Int[] | Int>;
  votes_lt?: Maybe<Int>;
  votes_lte?: Maybe<Int>;
  votes_gt?: Maybe<Int>;
  votes_gte?: Maybe<Int>;
  createdBy?: Maybe<String>;
  createdBy_not?: Maybe<String>;
  createdBy_in?: Maybe<String[] | String>;
  createdBy_not_in?: Maybe<String[] | String>;
  createdBy_lt?: Maybe<String>;
  createdBy_lte?: Maybe<String>;
  createdBy_gt?: Maybe<String>;
  createdBy_gte?: Maybe<String>;
  createdBy_contains?: Maybe<String>;
  createdBy_not_contains?: Maybe<String>;
  createdBy_starts_with?: Maybe<String>;
  createdBy_not_starts_with?: Maybe<String>;
  createdBy_ends_with?: Maybe<String>;
  createdBy_not_ends_with?: Maybe<String>;
  answer?: Maybe<String>;
  answer_not?: Maybe<String>;
  answer_in?: Maybe<String[] | String>;
  answer_not_in?: Maybe<String[] | String>;
  answer_lt?: Maybe<String>;
  answer_lte?: Maybe<String>;
  answer_gt?: Maybe<String>;
  answer_gte?: Maybe<String>;
  answer_contains?: Maybe<String>;
  answer_not_contains?: Maybe<String>;
  answer_starts_with?: Maybe<String>;
  answer_not_starts_with?: Maybe<String>;
  answer_ends_with?: Maybe<String>;
  answer_not_ends_with?: Maybe<String>;
  AND?: Maybe<QuestionWhereInput[] | QuestionWhereInput>;
}

export interface QuestionUpdateManyMutationInput {
  questionTitle?: Maybe<String>;
  questionBody?: Maybe<String>;
  votes?: Maybe<Int>;
  createdBy?: Maybe<String>;
  answer?: Maybe<String>;
}

export interface QuestionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuestionWhereInput>;
  AND?: Maybe<
    QuestionSubscriptionWhereInput[] | QuestionSubscriptionWhereInput
  >;
}

export type QuestionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface AggregateQuestion {
  count: Int;
}

export interface AggregateQuestionPromise
  extends Promise<AggregateQuestion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuestionSubscription
  extends Promise<AsyncIterator<AggregateQuestion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface QuestionPreviousValues {
  id: ID_Output;
  questionTitle: String;
  questionBody: String;
  votes: Int;
  createdBy?: String;
  answer?: String;
}

export interface QuestionPreviousValuesPromise
  extends Promise<QuestionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  questionTitle: () => Promise<String>;
  questionBody: () => Promise<String>;
  votes: () => Promise<Int>;
  createdBy: () => Promise<String>;
  answer: () => Promise<String>;
}

export interface QuestionPreviousValuesSubscription
  extends Promise<AsyncIterator<QuestionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  questionTitle: () => Promise<AsyncIterator<String>>;
  questionBody: () => Promise<AsyncIterator<String>>;
  votes: () => Promise<AsyncIterator<Int>>;
  createdBy: () => Promise<AsyncIterator<String>>;
  answer: () => Promise<AsyncIterator<String>>;
}

export interface QuestionEdge {
  node: Question;
  cursor: String;
}

export interface QuestionEdgePromise
  extends Promise<QuestionEdge>,
    Fragmentable {
  node: <T = QuestionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuestionEdgeSubscription
  extends Promise<AsyncIterator<QuestionEdge>>,
    Fragmentable {
  node: <T = QuestionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface QuestionSubscriptionPayload {
  mutation: MutationType;
  node: Question;
  updatedFields: String[];
  previousValues: QuestionPreviousValues;
}

export interface QuestionSubscriptionPayloadPromise
  extends Promise<QuestionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuestionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuestionPreviousValuesPromise>() => T;
}

export interface QuestionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuestionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuestionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuestionPreviousValuesSubscription>() => T;
}

export interface Question {
  id: ID_Output;
  questionTitle: String;
  questionBody: String;
  votes: Int;
  createdBy?: String;
  answer?: String;
}

export interface QuestionPromise extends Promise<Question>, Fragmentable {
  id: () => Promise<ID_Output>;
  questionTitle: () => Promise<String>;
  questionBody: () => Promise<String>;
  votes: () => Promise<Int>;
  createdBy: () => Promise<String>;
  answer: () => Promise<String>;
}

export interface QuestionSubscription
  extends Promise<AsyncIterator<Question>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  questionTitle: () => Promise<AsyncIterator<String>>;
  questionBody: () => Promise<AsyncIterator<String>>;
  votes: () => Promise<AsyncIterator<Int>>;
  createdBy: () => Promise<AsyncIterator<String>>;
  answer: () => Promise<AsyncIterator<String>>;
}

export interface QuestionNullablePromise
  extends Promise<Question | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  questionTitle: () => Promise<String>;
  questionBody: () => Promise<String>;
  votes: () => Promise<Int>;
  createdBy: () => Promise<String>;
  answer: () => Promise<String>;
}

export interface QuestionConnection {
  pageInfo: PageInfo;
  edges: QuestionEdge[];
}

export interface QuestionConnectionPromise
  extends Promise<QuestionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuestionEdge>>() => T;
  aggregate: <T = AggregateQuestionPromise>() => T;
}

export interface QuestionConnectionSubscription
  extends Promise<AsyncIterator<QuestionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuestionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuestionSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Question",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
