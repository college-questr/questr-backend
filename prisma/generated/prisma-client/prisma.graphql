module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateQuestion {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createQuestion(data: QuestionCreateInput!): Question!
  updateQuestion(data: QuestionUpdateInput!, where: QuestionWhereUniqueInput!): Question
  updateManyQuestions(data: QuestionUpdateManyMutationInput!, where: QuestionWhereInput): BatchPayload!
  upsertQuestion(where: QuestionWhereUniqueInput!, create: QuestionCreateInput!, update: QuestionUpdateInput!): Question!
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteManyQuestions(where: QuestionWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  question(where: QuestionWhereUniqueInput!): Question
  questions(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Question]!
  questionsConnection(where: QuestionWhereInput, orderBy: QuestionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  node(id: ID!): Node
}

type Question {
  id: ID!
  questionTitle: String!
  questionBody: String!
  votes: Int!
  createdBy: String
  answer: String
}

type QuestionConnection {
  pageInfo: PageInfo!
  edges: [QuestionEdge]!
  aggregate: AggregateQuestion!
}

input QuestionCreateInput {
  id: ID
  questionTitle: String!
  questionBody: String!
  votes: Int!
  createdBy: String
  answer: String
}

type QuestionEdge {
  node: Question!
  cursor: String!
}

enum QuestionOrderByInput {
  id_ASC
  id_DESC
  questionTitle_ASC
  questionTitle_DESC
  questionBody_ASC
  questionBody_DESC
  votes_ASC
  votes_DESC
  createdBy_ASC
  createdBy_DESC
  answer_ASC
  answer_DESC
}

type QuestionPreviousValues {
  id: ID!
  questionTitle: String!
  questionBody: String!
  votes: Int!
  createdBy: String
  answer: String
}

type QuestionSubscriptionPayload {
  mutation: MutationType!
  node: Question
  updatedFields: [String!]
  previousValues: QuestionPreviousValues
}

input QuestionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuestionWhereInput
  AND: [QuestionSubscriptionWhereInput!]
}

input QuestionUpdateInput {
  questionTitle: String
  questionBody: String
  votes: Int
  createdBy: String
  answer: String
}

input QuestionUpdateManyMutationInput {
  questionTitle: String
  questionBody: String
  votes: Int
  createdBy: String
  answer: String
}

input QuestionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  questionTitle: String
  questionTitle_not: String
  questionTitle_in: [String!]
  questionTitle_not_in: [String!]
  questionTitle_lt: String
  questionTitle_lte: String
  questionTitle_gt: String
  questionTitle_gte: String
  questionTitle_contains: String
  questionTitle_not_contains: String
  questionTitle_starts_with: String
  questionTitle_not_starts_with: String
  questionTitle_ends_with: String
  questionTitle_not_ends_with: String
  questionBody: String
  questionBody_not: String
  questionBody_in: [String!]
  questionBody_not_in: [String!]
  questionBody_lt: String
  questionBody_lte: String
  questionBody_gt: String
  questionBody_gte: String
  questionBody_contains: String
  questionBody_not_contains: String
  questionBody_starts_with: String
  questionBody_not_starts_with: String
  questionBody_ends_with: String
  questionBody_not_ends_with: String
  votes: Int
  votes_not: Int
  votes_in: [Int!]
  votes_not_in: [Int!]
  votes_lt: Int
  votes_lte: Int
  votes_gt: Int
  votes_gte: Int
  createdBy: String
  createdBy_not: String
  createdBy_in: [String!]
  createdBy_not_in: [String!]
  createdBy_lt: String
  createdBy_lte: String
  createdBy_gt: String
  createdBy_gte: String
  createdBy_contains: String
  createdBy_not_contains: String
  createdBy_starts_with: String
  createdBy_not_starts_with: String
  createdBy_ends_with: String
  createdBy_not_ends_with: String
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  AND: [QuestionWhereInput!]
}

input QuestionWhereUniqueInput {
  id: ID
}

type Subscription {
  question(where: QuestionSubscriptionWhereInput): QuestionSubscriptionPayload
}
`
      }
    